---
import TagsTabs from '@components/TagsTabs.astro';
import { getInfoAudio } from '@/utils/getInfoAudio';
import {TOKEN} from '@/constants.ts'
import { Global } from '@/globalState/globalUrl';
import { uploadImg } from '@/utils/uploadImg';
import {modAudio} from '@/utils/modAudio';
import AddUserSearch  from '@/components/AddUserSearch.vue';

const {id} = Astro.params

let audio
let mensaje = "";
try{

    const token = Astro.cookies.get(TOKEN);
    if(token != undefined && id != undefined){
        const response = await getInfoAudio(token?.value, id)
        audio = response
        console.log("audio", audio)

    }
}catch(e){
    console.log(e);
}

if (Astro.request.method ==="POST" ) {

try{
    interface Params {
        titulo?: string;
        esPrivada?: boolean;
        img?: string;
        esAlbum?: boolean;
        esPodcast?: boolean;
        fechaLanz?: string;
        duracionSeg?: number;
        cancion?: any;
        idsUsuarios?: string;
        tipoEtiqueta?: string;
        etiquetas?: string;
    }
    const data = await Astro.request.formData();
    const token = Astro.cookies.get(TOKEN);
    const file = data.get("photo") as File
    let params : Params ={}
    if(file.size !== 0){
        const img = await uploadImg(file, token?.value)
        params["img"] = img.id
    }
    let can = data.get("cancion") as File
    if(can.name != ""){
        params['cancion']= can
        params["duracionSeg"] = parseFloat(data.get("duracion") as string) || 0
    }
    params["titulo"] = data.get("titulo") as string
    const esPrivada = data.get("esPrivada")
    if(esPrivada === null){
        params["esPrivada"] = false
    }else{
        params["esPrivada"] = true
    }

    let features = Astro.cookies.get('artistList')?.value;
    if(features=== undefined || features.length === 2){
        features = "";
    }else{
        params["idsUsuarios"] = features.slice(1, -1);
    }


    const tags = data.getAll("tags")
    let esPodcast = false;
    let typeEtiqueta = "Cancion";
    if(tags.length !== 0){
        typeEtiqueta = data.get("tabsaudio") as string;
        if(typeEtiqueta == "Podcast"){
            esPodcast = true;
        }
        params["tipoEtiqueta"] = typeEtiqueta
        params["esPodcast"] = esPodcast
        params["etiquetas"] = tags.join(",")
    }

    

    console.log("params", params)
    const responseMod = await modAudio(params, token?.value, id)
    // console.log("responseMod", responseMod)
    if(responseMod && responseMod.status === 200){
      mensaje = "Audio modificado correctamente"
    }

} catch (error) {
//  if (error instanceof TypeError) {
//    errors.peticion = "Error en la petici√≥n";
//  }
//
}
}

---

<div class="flex flex-col gap-3">
    <div class="flex flex-row justify-between items-center">
        <h2 class="text-xl font-medium">Modifica tu audio</h2>
        <button id="eliminar" class="text-lg font-medium bg-[#ff0000d1] text-grey px-2 py-1 rounded-sm">Eliminar</button>
    </div>
    <form class="flex flex-col items-center gap-3 pt-4" novalidate method="POST">
        <div class="flex flex-row items-center w-full gap-3">

            <section class="flex flex-col">
                <input type="file" id="addFoto" name="photo" class=" text-white p-2 rounded-md hidden" onchange="previewImage(event)" />
                <div class=" w-64 aspect-square mt-2 cursor-pointer bg-[#333] rounded-md border-2 border-[#c5c5c5] flex justify-center items-center" onclick="document.getElementById('addFoto').click();">
                    <img id="Photo" class="w-64 aspect-square rounded-md " src={Global.url + "foto/"+ audio.imgAudio}/>
                    <img id="preview" class="w-64 aspect-square rounded-md hidden" />
                </div>
            </section>
            <section class="h-64 flex flex-col items-start gap-4">
                <div class="h-20 flex flex-row justify-start gap-4">

                    <div class="flex flex-col gap-1">
                        <label>Nombre del audio</label>
                        <input type="text" name="titulo" class="w-80 h-10 rounded-md bg-[#333] border-2 border-[#c5c5c5] text-white p-2 outline-none" placeholder="Nombre" value={audio.titulo} />
                    </div>
                    <div class="flex flex-col gap-1">
                        <label >Participantes</label>

                        <AddUserSearch client:load artistProps={audio.artistas}/>

                    </div>


                </div>
                <div class="flex flex-row gap-2 items-center ">
                    <label>Privado</label>
                    {audio.esPrivada && <input type="checkbox" name="esPrivada" value={audio.esPrivada} checked/>}
                    {!audio.esPrivada && <input type="checkbox" name="esPrivada" value={audio.esPrivada}/>}
                    
                </div>
                <div class="w-full h-full">
                    <TagsTabs subject="audio"/>
                </div>
            </section>
        </div>
        <div class="w-full flex flex-col gap-2">
            <input type="file" id="file" name="cancion"/>
            <input type="number" id="duracion" name="duracion" class="hidden"/>
            <audio id="audio"  controls class="w-full"></audio>
        </div>
        <input type="submit" class=" bg-bluePB px-4 py-1 rounded-md font-semibold" value="Guardar"/>
        <div>
            {mensaje &&
                <div class="bg-bluePB text-white font-semibold p-2 rounded-md bg-opacity-70 border-2 border-bluePB">
                    {mensaje}
                </div>
            }
        </div>
    </form>
</div>

<script is:inline>
    function previewImage(event) {
        var reader = new FileReader();
        reader.onload = function(){
            var output = document.getElementById('preview');
            output.style.display = 'block';
            output.src = reader.result;

            var output2 = document.getElementById('Photo');
            output2.style.display = 'hidden';
            output2.src = null;

        };
        reader.readAsDataURL(event.target.files[0]);
    }

</script>
<script>
    import { Global } from '@/globalState/globalUrl';
    import {getAudio} from '@/utils/getAudio'
    function getCookie(name: any) {
    let cookieArr = document.cookie.split("; ");

    for(let i = 0; i < cookieArr.length; i++) {
        let cookiePair = cookieArr[i].split("=");

        if(name == cookiePair[0]) {
            return decodeURIComponent(cookiePair[1]);
        }
    }
  }
  const jws = getCookie('token')
    var audio = document.getElementById('audio') as HTMLAudioElement;
            if(audio && jws){
                try{
                    const request = await getAudio(jws, '7');
                audio.src = URL.createObjectURL(request);
                audio.load()
                }catch(e){
                    console.log(e);
                }
            }

    const eliminar = document.getElementById("eliminar")
    eliminar?.addEventListener("click", () => {
        let pathArray = window.location.pathname.split('/');
        let id = pathArray[pathArray.length - 1];
        if(id !== undefined){
            fetch(`${Global.url}audio/delete/${id}`, {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${jws}`
                }
            }).then(() => window.history.go(-1)).catch((e) => console.log(e))
        }
    })
</script>