---
import { createAudio } from '@/utils/createAudio';
import { uploadImg } from '@/utils/uploadImg';
import TagsTabs from '@components/TagsTabs.astro';
import {TOKEN} from '@/constants.ts'
import { createPlaylist } from '@/utils/createPlaylist';

interface Props {
    title: string
}

const {title} = Astro.props

if (Astro.request.method ==="POST" ) {

    try{

    const data = await Astro.request.formData();
    const token = Astro.cookies.get(TOKEN);
    const file = data.get("photo")
    console.log("hola")
    if (file instanceof File) {
        if (file.size === 0) {
            const tags = data.getAll("tags")
            const typeEtiqueta = data.get("tabsaudio") as string;
            await createAudio({
                titulo: data.get("titulo") as string,
                esPrivada: data.get("esPrivada") as string == "on" || false,
                esAlbum: false,
                esPodcast: false,
                fechaLanz: new Date().toISOString(),
                duracionSeg: parseFloat(data.get("duracion") as string) || 0,
                cancion: data.get("cancion"), 
                tipoEtiqueta: typeEtiqueta,
                etiquetas: tags.join(",") // Convertimos tags a un string separados por comas, ya que asi lo pide la API
            }, token?.value)
            
        }else{
            console.log("buenas")
            const img = await uploadImg(file)
            const tags = data.getAll("tags")
            const typeEtiqueta = data.get("tabsaudio") as string;

            let i = 0
            let canciones = []
            while(i < 50 && data.get("audio"+i) != null){   
                const response = await createAudio({
                titulo: data.get("name"+i) as string,
                esPrivada: false,
                img: img.id,
                esAlbum: false,
                esPodcast: false,
                fechaLanz: new Date().toISOString(),
                duracionSeg: parseFloat(data.get("duracion"+i) as string) || 0,
                cancion: data.get("audio"+i), 
                etiquetas: tags.join(",") // Convertimos tags a un string separados por comas, ya que asi lo pide la API
                }, token?.value)
                canciones.push(response.data.idaudio)
                i++
            }
            console.log("canciones")
            const user = JSON.parse(Astro.cookies.get("usuario")?.value as any)
            await createPlaylist({
            nombre: data.get("name") as string,
            descripcion: "descripcion del album",
            esPrivada:  false,
            imgLista: img.id,
            esAlbum: true,
            tipoLista: "NORMAL",
            idUsuario: user.idUsuario,
            audios: canciones
        }, token?.value)       
        console.log("playlist")
     
            // for(let n = 0; n<i; n++){
            //     fetch('https://playbeat.uksouth.cloudapp.azure.com/lista/audio/'+ response.data.idLista  +'/'+canciones[n] , {
            //         method: 'POST',
            //         headers: {
            //             'Content-Type': 'application/json',
            //             'Authorization': `Bearer ${token}` // Uncomment this line if you need to send a bearer token
            //         },
            //         })
            //         .then(response => response.json())
            //         .then(() => {window.history.back()})
            //         .catch((error) => {
            //             window.history.back();
            //             console.error('Error:', error);
            //         });
            // }
        }
    }


    const tags = data.getAll("tags")
    const typeEtiqueta = data.get("tabsaudio") as string;




// return Astro.redirect("/creator/tusaudios")

} catch (error) {
//  if (error instanceof TypeError) {
//    errors.peticion = "Error en la petici√≥n";
//  }
//
}
}

---

<div class="flex flex-col gap-3 px-8">
    <h2 class="text-xl font-medium">{title}</h2>
    <form class="flex flex-col items-center gap-3 pt-4" method="POST" novalidate>
        <div class="flex flex-row items-center w-full gap-3">

            <section class="flex flex-col">
                <input type="file" id="addFoto" name="photo" class=" text-white p-2 rounded-md hidden" onchange="previewImage(event)" />
                <div class=" w-64 aspect-square mt-2 cursor-pointer bg-[#333] rounded-md border-2 border-[#c5c5c5] flex justify-center items-center" onclick="document.getElementById('addFoto').click();">
                    <img id="preview" class="w-64 aspect-square rounded-md hidden" />
                    <svg  xmlns="http://www.w3.org/2000/svg"  width="70"  height="70"  viewBox="0 0 24 24"  fill="none"  stroke="#c5c5c5"  stroke-width="1"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-photo"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M15 8h.01" /><path d="M3 6a3 3 0 0 1 3 -3h12a3 3 0 0 1 3 3v12a3 3 0 0 1 -3 3h-12a3 3 0 0 1 -3 -3v-12z" /><path d="M3 16l5 -5c.928 -.893 2.072 -.893 3 0l5 5" /><path d="M14 14l1 -1c.928 -.893 2.072 -.893 3 0l3 3" /></svg>
                </div>
            </section>
            <section class="h-64 flex flex-col items-start gap-4">
                <div class="h-20 flex flex-row justify-start gap-4">

                    <div class="flex flex-col gap-1">
                        <label>Nombre del album</label>
                        <input type="text" name="name" class="w-80 h-10 rounded-md bg-[#333] border-2 border-[#c5c5c5] text-white p-2 outline-none" placeholder="Nombre" />
                    </div>
                    <div class="flex flex-col gap-1">
                        <label >Participantes</label>
                        <input type="text" name="featurings" class="w-80 h-10 rounded-md bg-[#333] border-2 border-[#c5c5c5] text-white p-2 outline-none" placeholder="Usuario" />
                    </div>
                    <div class="flex flex-row gap-2 items-center mt-4 ">
                        
                    </div>

                </div>
            </section>
        </div>
        <div id="audioContainer" class="w-full flex flex-col gap-2 ">
            <div class="w-full h-[1px] bg-[#c5c5c5] "></div>
            <div class="flex flex-row items-center w-full gap-3 ">

                <section class="h-26 flex flex-col items-start gap-4 mt-4">
                    <div class="h-20 flex flex-row justify-start gap-4">
    
                        <div class="flex flex-col gap-1">
                            <label>Nombre del audio</label>
                            <input type="text" name="name0" class="w-80 h-10 rounded-md bg-[#333] border-2 border-[#c5c5c5] text-white p-2 outline-none" placeholder="Nombre" />
                        </div>
                        <div class="flex flex-col gap-1">
                            <label >Participantes</label>
                            <input type="text" name="featurings0" class="w-80 h-10 rounded-md bg-[#333] border-2 border-[#c5c5c5] text-white p-2 outline-none" placeholder="Usuario" />
                        </div>
                    </div>
                </section>
            </div>
            <input type="file" id="file0" name="audio0"/>
            <input type="number" id="duracion0" name="duracion0" class="hidden"/>
            <audio id="audio0"  controls class="w-full mb-4" ></audio>
        </div>
        <div class="flex flex-row">
            <svg id="addAudio" xmlns="http://www.w3.org/2000/svg"   width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-plus cursor-pointer "><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 5l0 14" /><path d="M5 12l14 0" /></svg>
            <svg id="minusAudio" xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-minus cursor-pointer"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12l14 0" /></svg>        
        </div>
        
        <input type="submit" class=" bg-bluePB px-4 py-1 rounded-sm" value="Subir"/>
    </form>

</div>
<script>
    
    var audioCount = 1;
    document.getElementById('addAudio')?.addEventListener('click', function() {
        var newAudioBlock = document.createElement('div');
        newAudioBlock.className = "w-full flex flex-col gap-2";
        newAudioBlock.innerHTML = `
        <div class="w-full h-[1px] bg-[#c5c5c5] "></div>
            <div class="flex flex-row items-center w-full gap-3 ">

                <section class="h-20 flex flex-col items-start gap-4 mt-4">
                    <div class="h-20 flex flex-row justify-start gap-4">
    
                        <div class="flex flex-col gap-1">
                            <label>Nombre del audio</label>
                            <input type="text" name="name${audioCount}" class="w-80 h-10 rounded-md bg-[#333] border-2 border-[#c5c5c5] text-white p-2 outline-none" placeholder="Nombre" />
                        </div>
                        <div class="flex flex-col gap-1">
                            <label >Participantes</label>
                            <input type="text" name="featurings${audioCount}" class="w-80 h-10 rounded-md bg-[#333] border-2 border-[#c5c5c5] text-white p-2 outline-none" placeholder="Usuario" />
                        </div>
                    </div>
                </section>
            </div>
            <input type="file" id="file${audioCount}" name="audio${audioCount}"/>
            <input type="number" id="duracion${audioCount}" name="duracion${audioCount}" class="hidden"/>
            <audio id="audio${audioCount}"  controls class="w-full mb-4"></audio>
        `;
        
        document.getElementById('audioContainer')?.appendChild(newAudioBlock);
        // Check for BlobURL support
        var blob = window.URL || window.webkitURL;

        const inputFile = document.getElementById('file'+audioCount) as HTMLInputElement;
        const audio = document.getElementById('audio'+audioCount) as HTMLAudioElement;
        const duracion = document.getElementById('duracion'+audioCount) as HTMLInputElement;

        if(inputFile != null && audio != null && duracion != null){
            inputFile.addEventListener('change', function(){
                if(this.files !== null ){
                    var file = this.files[0]
                    var fileURL = blob.createObjectURL(file);
                    audio.src = fileURL;
                    audio.addEventListener('loadedmetadata', function() {
                        duracion.value = audio.duration.toString();
                    });
                }
                
            });
        }
        audioCount++;
    });
    document.getElementById('minusAudio')?.addEventListener('click', function() {
        if(audioCount > 1) {
            audioCount--;
            var audioContainer = document.getElementById('audioContainer');
            if (audioContainer?.lastChild) {
                audioContainer.removeChild(audioContainer.lastChild);
            }
        }
    });


    // Check for BlobURL support
    var blob = window.URL || window.webkitURL;

const inputFile = document.getElementById('file0') as HTMLInputElement;
const audio = document.getElementById('audio0') as HTMLAudioElement;
const duracion = document.getElementById('duracion0') as HTMLInputElement;

if(inputFile != null && audio != null && duracion != null){
    inputFile.addEventListener('change', function(){
        if(this.files !== null ){
            var file = this.files[0]
            var fileURL = blob.createObjectURL(file);
            audio.src = fileURL;
            audio.addEventListener('loadedmetadata', function() {
                duracion.value = audio.duration.toString();
            });
        }
    });
}
    
</script>
<script is:inline>
    function previewImage(event) {
        var reader = new FileReader();
        reader.onload = function(){
            var output = document.getElementById('preview') ;
            if(output != null){
                output.style.display = 'block';
                output.src = reader.result ;
            }

        };
        reader.readAsDataURL(event.target.files[0]);
    }
</script>