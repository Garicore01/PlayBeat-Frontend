---
interface Info{
    name: string;
    items: string[];
}

interface Props {
    info: Info;
}

const { info } = Astro.props

---
<div class="div" >
            <button class="button solid ">{info.name}</button>
            <button class="buttonOculto solid">{info.name}</button>
            <div class="dropdown">
                {info.items.map( (item, index) => {
                    return <span>{item}</span>
                })}
            </div>
        </div>



<style>

.button {
    border: 1.5px solid white;
    border-radius: 8px;
    color: white;
    font-weight: 600;
    cursor: pointer;
    padding: 8px;
}
.buttonOculto {
    border: 1.5px solid white;
    border-radius: 8px;
    color: white;
    font-weight: 600;
    cursor: pointer;
    padding: 8px;
    display:none;
}

  
.div {
  position: relative;
  display: inline-block;
}

.dropdown {
  display: none;
  position: absolute;
  background-color: #2f2f2f;

  min-width: 100px;
  border-radius: 10px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  z-index: 100;
}

.dropdown span {
  color: white;

  padding: 12px 16px;

  text-decoration: none;
  display: block;
  cursor: pointer;
}

.dropdown span{
  border-top: .5px solid white;

}
.dropdown span:first-child{
  border-top: 0px;
  border-top-left-radius:10px;
  border-top-right-radius:10px;
}
.dropdown span:last-child{

  border-bottom-left-radius:10px;
  border-bottom-right-radius:10px;
}

.dropdown span:hover {background-color: #6e6e6e;}

.button:focus ~ .dropdown {display: flex; flex-direction: column;}
.button:focus ~ .buttonOculto {display: block; position:absolute; top: 0; left: 0;}




</style>