---


interface Props {
  items: string[];
}

const { items } = Astro.props

---
<div class="divOpt" >
            <button class="button solid "><slot/></button>
            <button class="buttonOculto solid"><slot/></button>

              <div class="dropdown">
                {items.map( (item, index) => {
                    return <span>{item}</span>
                })}
              </div>
              <div class="noScroll"/>
            
      
</div>



<style>

.button {

    cursor: pointer;
    padding: 8px;
}
.buttonOculto {
    cursor: pointer;
    padding: 8px;
    display:none;
}

  
.divOpt {
  
  display: inline-block;

}

.noScroll {
  opacity: 0;
  visibility: hidden;
  position: fixed;
  z-index: 900;
  width: 83.3vw;
  height: 47.1vw;
  top: 0;
  left:16.6%;
}

.dropdown {
  display:none;
  position:fixed;
  background-color: #2f2f2f;
  width: 200px;
  border-radius: 10px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  z-index: 999;

}

.dropdown span {
  color: white;

  padding: 12px 16px;
  text-decoration: none;
  display: block;
  cursor: pointer;
}

.dropdown span{
  border-top: .5px solid white;

}
.dropdown span:first-child{
  border-top: 0px;
  border-top-left-radius:10px;
  border-top-right-radius:10px;
}
.dropdown span:last-child{

  border-bottom-left-radius:10px;
  border-bottom-right-radius:10px;
}

.dropdown span:hover {background-color: #6e6e6e;}

.button:focus ~ .noScroll {
  opacity: 1;
  visibility: visible;
  }
  .button:focus ~ .dropdown {
    display: flex; flex-direction: column;

  }
.button:focus ~ .buttonOculto {display: block; position:absolute; top: 0; left: 0;}




</style>